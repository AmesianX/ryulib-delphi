unit TestBinaryTree;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  BinaryTree,
  TestFramework, Classes, SyncObjs, SysUtils, Dialogs;

type
  TestTBinaryTree = class(TTestCase)
  strict private
    FObjectA : TGusetObject;
    FObjectB : TGusetObject;
    FObjectC : TGusetObject;
    FObjectD : TGusetObject;
    FObjectE : TGusetObject;
    FObjectF : TGusetObject;
    FObjectG : TGusetObject;
    FBinaryTree: TBinaryTree;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestClear;
    procedure TestAdd;
    procedure TestRemove;
  end;

implementation

procedure TestTBinaryTree.SetUp;
begin
  FObjectA := TGusetObject.Create('A');
  FObjectB := TGusetObject.Create('B');
  FObjectC := TGusetObject.Create('C');
  FObjectD := TGusetObject.Create('D');
  FObjectE := TGusetObject.Create('E');
  FObjectF := TGusetObject.Create('F');
  FObjectG := TGusetObject.Create('G');

  FBinaryTree := TBinaryTree.Create;
end;

procedure TestTBinaryTree.TearDown;
begin
  FreeAndNil(FObjectA);
  FreeAndNil(FObjectB);
  FreeAndNil(FObjectC);
  FreeAndNil(FObjectD);
  FreeAndNil(FObjectE);
  FreeAndNil(FObjectF);
  FreeAndNil(FObjectG);

  FBinaryTree.Free;
  FBinaryTree := nil;
end;

procedure TestTBinaryTree.TestClear;
begin
  FBinaryTree.Clear;
end;

procedure TestTBinaryTree.TestAdd;
begin
//  FBinaryTree.Add( FObjectA );
//  FBinaryTree.Add( FObjectB );
//  FBinaryTree.Add( FObjectC );
//  FBinaryTree.Add( FObjectD );
//  FBinaryTree.Add( FObjectE );
//  FBinaryTree.Add( FObjectF );
//  FBinaryTree.Add( FObjectG );
//
//  // A, B는 부모가 헤더여야 한다.  따라서 헤더의 부모는 nil
//  Assert( FObjectA.FNode.FParent.FParent = nil, 'FObjectA.FNode.FParent.FParent = nil' );
//  Assert( FObjectB.FNode.FParent.FParent = nil, 'FObjectB.FNode.FParent.FParent = nil' );
//
//  // C, D는 부모가 A여야 한다.
//  Assert( FObjectC.FNode.FParent = FObjectA.FNode, 'FObjectC.FNode.FParent = FObjectA.FNode' );
//  Assert( FObjectD.FNode.FParent = FObjectA.FNode, 'FObjectD.FNode.FParent = FObjectA.FNode' );
//
//  // A의 Left는 C, A의 Right는 D
//  Assert( FObjectA.FNode.FLeft  = FObjectC.FNode, 'FObjectA.FNode.FLeft  = FObjectC.FNode' );
//  Assert( FObjectA.FNode.FRight = FObjectD.FNode, 'FObjectA.FNode.FRight = FObjectD.FNode' );
end;

procedure TestTBinaryTree.TestRemove;
begin
  FBinaryTree.Add( FObjectA );
  FBinaryTree.Add( FObjectB );
  FBinaryTree.Add( FObjectC );
  FBinaryTree.Add( FObjectD );
  FBinaryTree.Add( FObjectE );
  FBinaryTree.Add( FObjectF );
  FBinaryTree.Add( FObjectG );

  ShowMessage( FBinaryTree.GetText );

  FBinaryTree.Remove( FObjectA );

  ShowMessage( FBinaryTree.GetText );

  // D의 부모는 헤더여야 한다.
  Assert( FObjectD.Node.FParent.FParent = nil, 'FObjectD.FNode.FParent.FParent = nil' );
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTBinaryTree.Suite);
end.

